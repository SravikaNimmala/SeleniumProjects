{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ins",
				"instruction"
			],
			[
				"int",
				"inst"
			],
			[
				"MA",
				"Machine"
			],
			[
				"c",
				"c_str"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "9/7/2016 - Orientation\n######################\n\n**Why are we assembled?**\n\n   - It is not about getting the job, it about how to keep a job. Job sustainability is important.\n   - Learning theatrical aspects from Real-time scenarios.\n\n**Why did you choose testing?**\n\n   - How to explain during interviews.\n   - How to explain to our peers.\n   - How do we explain to self.\n\n**What not to say in interviews?**\n\n   - Testing is easy.\n   - No programming.\n\n**Why choose the field of testing?**\n\n   - Directly deals with quality.\n      - It has to be done.\n      - Must requirement to know the stability of the product.\n      - Acceptance by the customer.\n      - If any defect is detected after the product is released, testing team takes the responsibility. It is a challenging job. It deals directly with quality of the end product.\n   - My profile best suits for testing.\n      - Nature, attitude and profile of a person can lead them to take an interest in testing.\n      - A tester will do this knowingly and in full conscious. \n   - Testing is not associated with boom or hype.\n      - Boom: the continuous demand of any product is called boom. But after a certain time there is a possibility for the product to reach its saturation point and hence loose its necessity.\n      - Hype: There is a possibility that the information might be exaggerated.\n      - Fortunately testing is not associated with boom or hype.\n      - **Natural growth** : 10 years ago developers used to write the code as well as test it themselves. There was no dedicated place for testers in the SDLC. There were many defects found after the release. Over a period of time, customer and vendor business was coming down. There was a need for thorough testing. So testing department was established. Because of \"NEED\" of quality there is a great demand for testing. Testing is naturally growing, hence it is a healthy growth and there is no saturation point for it.\n   - How long will it \"grow\"?\n      - As long as there is a need for quality, there is a place for testing tools in the market. Once the customer is used to the quality he wouldn't want a lesser product. Quality is the driving force.\n   - Testing is mandatory for the industry.\n      - Irrespective of the technology, testing is compulsory.\n      - Technologies might change, but testing is mandatory.\n   - Testing is independent of technology.\n      - When a market is in need of a technology then there is more demand.\n      - Market in turn depends of economy. If a global-financial crisis occurs, then the market is destroyed and then there is a fall in the technology demand too.\n      - But testing is independent of technology because testing has a constant framework to test the quality of projects written using any technology.\n   - Scope for testing:\n      - Geological scope: Wherever you go, any corner of the world the need and way of testing doesn't change. \n      - Chronological scope: Timely, it is forever. Natural growth as mentioned above.\n      - Professional scope: There is a 100% scope for testers everywhere. There are third party testing companies. ",
			"file": "A_Orientation.rst",
			"file_size": 3160,
			"file_write_time": 131177481286486760,
			"settings":
			{
				"buffer_size": 3114,
				"line_ending": "Windows",
				"name": "9/7/2016 - Orientation"
			}
		},
		{
			"contents": "9/8/2016 - Day 2\n################\n\n**Need for testers to the industry when developers could test**\n   - Multiple tasks are assigned to the developers.\n      - Developers focus 90% on writing the code and only 10% on testing when assigned two jobs at once.\n   - They have a sentimental attachment to the code.\n      - Criticism is not readily accepted by the developers and they don't try to test it in depth.\n\n**Testers Qualifications**\n   - Quality oriented mind setup\n      - Must provide quality at any time.\n   - Test to break attitude\n      - Breaking attitude to make good.\n      - Be open to errors.\n   - Internal Customer\n      - Act as a customer.\n      - Test as a person who uses the final product.\n   - Have no idea how program has been developed\n      - The developer always tries to convince the tester that the code written is error-free.\n      - Taking inputs from a developer can change the mind set of a tester. Hence they should refrain from knowing how the code has been developed.\n\n**Data and Testing**\n   - **Data**: Data that makes a functionality run correctly without any errors is called valid data. And the data that is used to test if a functionality projects an err or not is called invalid data.\n   - **Testing**: The use of valid data is called positive testing and the use of invalid data is called negative testing.\n\n**Perceptional difference between developer and a test engineer**\n   - **Developer**: Has a \"to prove\" attitude. A developer can end up using valid data to test the code. This process ends up being a *requirement check*.\n   - **Tester**: Has a \"to break\" attitude. A tester uses both valid and invalid data to test the code. Every functionality has a positive and a negative flow like two sides of a coin. It is the responsibility of the test engineer to do both positive and negative testing. Hence testing is robust and is prone to find defects. This process tests the *validation* of the final product.\n\n**Testing**\n   - Two types:\n      - Manual Testing: Hybrid process and agile process\n      - Automation: There are two mostly used software right now in the industry. QTP and Selenium are the two current automation tools in the market that are currently widely used and known. But Selenium is open source and hence might take over everywhere. It is important to learn the formula of Selenium instead of focusing on the constants.\n\n**Manual Testing**\n   - When we talk about testing **QUALITY** is the key word. But what is quality? The internal factor of customer is the feeling of satisfaction. When the requirements are met of the customer then the \"satisfied\" quality is achieved. \n",
			"file": "AB_Day2.rst",
			"file_size": 2679,
			"file_write_time": 131181995567755221,
			"settings":
			{
				"buffer_size": 2642,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "9/12/2016 - Day 3\n#################\n\n**QUALITY**\n	- (recap): Quality is meeting the customer's requirements. A test engineer must know the requirements and must be met.\n\n**DEVIATION FROM THE QUALITY**\n	- There is a possibility that the requirements are not met and a developer and the test engineer may deviate from the benchmark.\n	- There are seven different deviations:\n		- **Defect**: Deviation from the requirements. Defect is visible and is always associated with the functionality. It is visible to the end user. They are found by test engineers or the customers. This is *effect*.\n		- **Error**: We know that the code defines a functionality. It is an invisible mistake in the code. This mistake is associated with the program(code). So basically it is encountered by the developer. This is the *cause*.\n		-  **Bug**: Conceptually bug is same the defect. But from the point of usage they are different. Defect is used by both professionals and users/customers. But the word *bug* is exclusively used by professionals. Based on some companies it is different. When a defect is raised it goes back to the developer. And if the defect is accept by the developer then it becomes a bug. So an accepted defect is a bug.\n		- **Flaw/Mistake**: Deviation from the right way of doing the task is a mistake. There are two types:	\n			- Repairable: Once a mistake is done it can be fixed.\n			- Ir-repairable: Once the mistake is done we can only take preventable actions. Damage control.\n		- **Issue**: There will be a momentum for every task. Some obstruction has occurred which is unable to overcome. This is called an issue. So an obstruction to a work flow or the task is called issue. There is always a way out of obstruction called as *work around*.\n		- **Failure**: State of inability to reach the goal/destiny.\n		- **Risk**: It is the negative effect of the task. A potential, possible and adverse effect of a task is called risk.\n\n**QUALITY GAP**\n	- The missing of certain quantity of quality is called quality gap.\n	- Three scenarios:\n		- Defect of task = no satisfaction\n		- When requirements are met = satisfaction\n		- When final requirements achieved are higher than the customer's requirements = DELIGHT\n	- 0% - 100% = Requirement zone.\n		- The gap between 0% and 100% is called *requirement gap*.\n	- > 100% = Quality zone.\n		- The gap between 100% and 200% or in between is called *quality gap*.\n	- The gap between a vendor's delivered quality and dream quality is called a *quality gap*.\n	- The gap between a customer's desired quality and delivered quality is called a *quality gap*.\n	- Two things a test engineer must keep in mind are:\n		- DELIGHT > SATISFACTION\n		- The current version of a product must always be better than previous version.\n\n**REDEFINED QUALITY**\n	- Redefinition of quality is = Presence of requirements + value.\n	- Value = User friendly/ Usability\n	- A test engineer must aim for *Functional perfection* + *User friendliness* when the final product is delivered.\n\n\n\n\n\n",
			"file": "AC_Day3.rst",
			"file_size": 3046,
			"file_write_time": 131181998013994535,
			"settings":
			{
				"buffer_size": 3002,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "9/12/2016 - Day 3\n#################\n\n**QUALITY**\n	- (recap): Quality is meeting the customer's requirements. A test engineer must know the requirements and must be met.\n\n**DEVIATION FROM THE QUALITY**\n	- There is a possibility that the requirements are not met and a developer and the test engineer may deviate from the benchmark.\n	- There are seven different deviations:\n		- **Defect**: Deviation from the requirements. Defect is visible and is always associated with the functionality. It is visible to the end user. They are found by test engineers or the customers. This is *effect*.\n		- **Error**: We know that the code defines a functionality. It is an invisible mistake in the code. This mistake is associated with the program(code). So basically it is encountered by the developer. This is the *cause*.\n		-  **Bug**: Conceptually bug is same the defect. But from the point of usage they are different. Defect is used by both professionals and users/customers. But the word *bug* is exclusively used by professionals. Based on some companies it is different. When a defect is raised it goes back to the developer. And if the defect is accept by the developer then it becomes a bug. So an accepted defect is a bug.\n		- **Flaw/Mistake**: Deviation from the right way of doing the task is a mistake. There are two types:	\n			- Repairable: Once a mistake is done it can be fixed.\n			- Ir-repairable: Once the mistake is done we can only take preventable actions. Damage control.\n		- **Issue**: There will be a momentum for every task. Some obstruction has occurred which is unable to overcome. This is called an issue. So an obstruction to a work flow or the task is called issue. There is always a way out of obstruction called as *work around*.\n		- **Failure**: State of inability to reach the goal/destiny.\n		- **Risk**: It is the negative effect of the task. A potential, possible and adverse effect of a task is called risk.\n\n**QUALITY GAP**\n	- The missing of certain quantity of quality is called quality gap.\n	- Three scenarios:\n		- Defect of task = no satisfaction\n		- When requirements are met = satisfaction\n		- When final requirements achieved are higher than the customer's requirements = DELIGHT\n	- 0% - 100% = Requirement zone.\n		- The gap between 0% and 100% is called *requirement gap*.\n	- > 100% = Quality zone.\n		- The gap between 100% and 200% or in between is called *quality gap*.\n	- The gap between a vendor's delivered quality and dream quality is called a *quality gap*.\n	- The gap between a customer's desired quality and delivered quality is called a *quality gap*.\n	- Two things a test engineer must keep in mind are:\n		- DELIGHT > SATISFACTION\n		- The current version of a product must always be better than previous version.\n\n**REDEFINED QUALITY**\n	- Redefinition of quality is = Presence of requirements + value.\n	- Value = User friendly/ Usability\n	- A test engineer must aim for *Functional perfection* + *User friendliness* when the final product is delivered.\n\n\n\n\n\n",
			"file": "Day3.rst",
			"file_size": 3046,
			"file_write_time": 131181999796443100,
			"settings":
			{
				"buffer_size": 3002,
				"line_ending": "Windows",
				"name": "9/12/2016 - Day 3"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Nimmala611/SeleniumProjects/SeleniumProjects/MindQSystems/AC_Day3.rst",
		"/C/Users/Nimmala611/SeleniumProjects/SeleniumProjects/MindQSystems/AB_Day2.rst",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab_5_NASM/graded",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab3_Simulator/MIPS-CPU-Simulator-master/regs",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Homework_Assignments/HW2_CommonDataStorage.rst",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Homework_Assignments/HW3_TimeForATimeOut.rst",
		"/C/Users/Nimmala611/Desktop/installation (1).rst",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_output_nasm.asm",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_if_nasm.asm",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_count_nasm.asm",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_while.c",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/hello.asm",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_while_nasm.asm",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_output.c",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_if.c",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_count.c",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab5_ASM/test_basic.c",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Lab2_Texas_Four_Step/memory.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab2_Texas_Four_Step/instructions.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab2_Texas_Four_Step/main.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab2_Texas_Four_Step/controller.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab2_Texas_Four_Step/io.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab2_Texas_Four_Step/alu.h",
		"/C/Users/Nimmala611/cosc2325/LabProjects/Homework_Assignments/HW1/documentation.txt",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/instructions.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/alu.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/alu.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/control.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/memory.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/io.h",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/control.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/io.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/memory.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/main.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/test.txt",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Lab1_RPN_Calculator/.gitignore",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Homework_Assignments/HW1/main.cpp",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Homework_Assignments/HW3_TimeForATimeOut.rst",
		"/C/Users/Nimmala611/Desktop/Summer'16/PcAssembly/HomeworkAssignments/HW2_CommonDataStorage.rst",
		"/C/Users/Nimmala611/cosc2425/LabProjects/Homework_Assignments/HW1/output.cpp",
		"/C/Users/Nimmala611/Desktop/Summer'16/PcAssembly/HomeworkAssignments/HW3_TimeForATimeOut.rst"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "A_Orientation.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3114,
						"regions":
						{
						},
						"selection":
						[
							[
								407,
								407
							]
						],
						"settings":
						{
							"auto_name": "9/7/2016 - Orientation",
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "AB_Day2.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2642,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "AC_Day3.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3002,
						"regions":
						{
						},
						"selection":
						[
							[
								3002,
								3002
							]
						],
						"settings":
						{
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 121.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Day3.rst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3002,
						"regions":
						{
						},
						"selection":
						[
							[
								3002,
								3002
							]
						],
						"settings":
						{
							"auto_name": "9/12/2016 - Day 3",
							"syntax": "Packages/RestructuredText/reStructuredText.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 121.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "AC_Day3.rst",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 50.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
